#!/bin/bash

# Meeting & Lecture Summarizer - One-Click Setup Script

echo "🎤 Meeting & Lecture Summarizer - Setup Wizard"
echo "=============================================="
echo ""

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to get user input with default
get_input() {
    local prompt="$1"
    local default="$2"
    local input
    
    if [ -n "$default" ]; then
        read -p "$prompt [$default]: " input
        echo "${input:-$default}"
    else
        read -p "$prompt: " input
        echo "$input"
    fi
}

echo "🔍 Checking system requirements..."

# Check Python
if ! command_exists python3; then
    echo "❌ Python 3 is required but not installed."
    echo "   Please install Python 3.8 or higher from https://python.org"
    exit 1
else
    echo "✅ Python 3 found: $(python3 --version)"
fi

# Check pip
if ! command_exists pip3; then
    echo "❌ pip3 is required but not installed."
    echo "   Please install pip3"
    exit 1
else
    echo "✅ pip3 found"
fi

# Check FFmpeg
if ! command_exists ffmpeg; then
    echo "⚠️  FFmpeg not found. This is required for video processing."
    echo "   Install with: brew install ffmpeg (macOS) or apt install ffmpeg (Ubuntu)"
    
    read -p "Continue without FFmpeg? (y/N): " continue_without_ffmpeg
    if [[ ! $continue_without_ffmpeg =~ ^[Yy]$ ]]; then
        echo "Please install FFmpeg and run this script again."
        exit 1
    fi
else
    echo "✅ FFmpeg found: $(ffmpeg -version | head -n 1)"
fi

echo ""
echo "📦 Installing Python dependencies..."
pip3 install -r requirements.txt

if [ $? -ne 0 ]; then
    echo "❌ Failed to install dependencies. Please check your internet connection and try again."
    exit 1
fi

echo ""
echo "🔑 Setting up environment configuration..."

# Check if .env already exists
if [ -f ".env" ]; then
    echo "⚠️  .env file already exists."
    read -p "Do you want to update it? (y/N): " update_env
    if [[ ! $update_env =~ ^[Yy]$ ]]; then
        echo "Keeping existing .env file."
    else
        rm .env
    fi
fi

# Create .env file if it doesn't exist
if [ ! -f ".env" ]; then
    echo "Creating .env file..."
    
    echo "Please provide your OpenAI API key (required for AI features):"
    echo "Get it from: https://platform.openai.com/api-keys"
    
    openai_key=$(get_input "OpenAI API Key" "")
    
    if [ -z "$openai_key" ]; then
        echo "⚠️  No OpenAI API key provided. You can add it later in the .env file."
        openai_key="your_openai_api_key_here"
    fi
    
    echo "Optional: Configure additional services (press Enter to skip):"
    weaviate_url=$(get_input "Weaviate URL" "http://localhost:8080")
    weaviate_key=$(get_input "Weaviate API Key" "")
    news_api_key=$(get_input "News API Key" "")
    whisper_model=$(get_input "Whisper Model Size (tiny/base/small/medium/large)" "base")
    
    # Create .env file
    cat > .env << EOF
# Environment Configuration - Generated by setup script

# OpenAI API Key for summarization and test generation
OPENAI_API_KEY=$openai_key

# Database URL (SQLite by default)
DATABASE_URL=sqlite:///./summarizer.db

# Weaviate Vector Database Configuration
WEAVIATE_URL=$weaviate_url
WEAVIATE_API_KEY=$weaviate_key

# Web Research API Keys
NEWS_API_KEY=$news_api_key

# Application Settings
MAX_FILE_SIZE_MB=100
ALLOWED_FILE_TYPES=audio/mpeg,audio/wav,audio/mp4,video/mp4,video/avi,video/mov

# Whisper Model Size (tiny, base, small, medium, large)
WHISPER_MODEL_SIZE=$whisper_model

# Feature Toggles
ENABLE_WEAVIATE=true
ENABLE_GRAPHRAG=true
ENABLE_WEB_RESEARCH=true
EOF

    echo "✅ Environment file created: .env"
fi

echo ""
echo "🐳 Setting up Weaviate (optional vector database)..."

if command_exists docker; then
    read -p "Start Weaviate with Docker? (Y/n): " start_weaviate
    if [[ ! $start_weaviate =~ ^[Nn]$ ]]; then
        echo "Starting Weaviate container..."
        docker run -d \
            --name weaviate-summarizer \
            -p 8080:8080 \
            -e AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true \
            -e PERSISTENCE_DATA_PATH='/var/lib/weaviate' \
            semitechnologies/weaviate:latest
        
        if [ $? -eq 0 ]; then
            echo "✅ Weaviate started on http://localhost:8080"
        else
            echo "⚠️  Failed to start Weaviate. You can start it manually later."
        fi
    fi
else
    echo "⚠️  Docker not found. Weaviate will not be started."
    echo "   Install Docker to use vector search features, or use Weaviate Cloud Service."
fi

echo ""
echo "✅ Setup completed successfully!"
echo ""
echo "📖 Next steps:"
echo ""
echo "🚀 Start React Web App:"
echo "   ./start-react.sh"
echo ""
echo "🌐 Then open: http://localhost:3000"

echo ""
echo "📚 Additional resources:"
echo "   📖 User Guide: USER_GUIDE.md"
echo "   🔗 API Docs: http://localhost:8000/docs (when backend is running)"
echo "   🆘 Troubleshooting: Check USER_GUIDE.md"
echo ""
echo "🎉 Ready to process your first recording!"
echo ""

# Make startup scripts executable
chmod +x start-react.sh

echo "💡 Pro tip: Start with a short (1-2 minute) audio file to test the system!"
